// Code generated by MockGen. DO NOT EDIT.
// Source: networkpolicy.go
//
// Generated by this command:
//
//	mockgen -source=networkpolicy.go -package=networkpolicy -destination=mock_networkpolicy.go
//
// Package networkpolicy is a generated GoMock package.
package networkpolicy

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/networking/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockNetworkPolicy is a mock of NetworkPolicy interface.
type MockNetworkPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkPolicyMockRecorder
}

// MockNetworkPolicyMockRecorder is the mock recorder for MockNetworkPolicy.
type MockNetworkPolicyMockRecorder struct {
	mock *MockNetworkPolicy
}

// NewMockNetworkPolicy creates a new mock instance.
func NewMockNetworkPolicy(ctrl *gomock.Controller) *MockNetworkPolicy {
	mock := &MockNetworkPolicy{ctrl: ctrl}
	mock.recorder = &MockNetworkPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkPolicy) EXPECT() *MockNetworkPolicyMockRecorder {
	return m.recorder
}

// BuildSignPodsNetworkPolicy mocks base method.
func (m *MockNetworkPolicy) BuildSignPodsNetworkPolicy(namespace string) *v1.NetworkPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildSignPodsNetworkPolicy", namespace)
	ret0, _ := ret[0].(*v1.NetworkPolicy)
	return ret0
}

// BuildSignPodsNetworkPolicy indicates an expected call of BuildSignPodsNetworkPolicy.
func (mr *MockNetworkPolicyMockRecorder) BuildSignPodsNetworkPolicy(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSignPodsNetworkPolicy", reflect.TypeOf((*MockNetworkPolicy)(nil).BuildSignPodsNetworkPolicy), namespace)
}

// CreateOrAddOwnerReference mocks base method.
func (m *MockNetworkPolicy) CreateOrAddOwnerReference(ctx context.Context, np *v1.NetworkPolicy, owner v10.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrAddOwnerReference", ctx, np, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrAddOwnerReference indicates an expected call of CreateOrAddOwnerReference.
func (mr *MockNetworkPolicyMockRecorder) CreateOrAddOwnerReference(ctx, np, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrAddOwnerReference", reflect.TypeOf((*MockNetworkPolicy)(nil).CreateOrAddOwnerReference), ctx, np, owner)
}

// PullPodNetworkPolicy mocks base method.
func (m *MockNetworkPolicy) PullPodNetworkPolicy(namespace string) *v1.NetworkPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullPodNetworkPolicy", namespace)
	ret0, _ := ret[0].(*v1.NetworkPolicy)
	return ret0
}

// PullPodNetworkPolicy indicates an expected call of PullPodNetworkPolicy.
func (mr *MockNetworkPolicyMockRecorder) PullPodNetworkPolicy(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullPodNetworkPolicy", reflect.TypeOf((*MockNetworkPolicy)(nil).PullPodNetworkPolicy), namespace)
}

// WorkerPodNetworkPolicy mocks base method.
func (m *MockNetworkPolicy) WorkerPodNetworkPolicy(namespace string) *v1.NetworkPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkerPodNetworkPolicy", namespace)
	ret0, _ := ret[0].(*v1.NetworkPolicy)
	return ret0
}

// WorkerPodNetworkPolicy indicates an expected call of WorkerPodNetworkPolicy.
func (mr *MockNetworkPolicyMockRecorder) WorkerPodNetworkPolicy(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkerPodNetworkPolicy", reflect.TypeOf((*MockNetworkPolicy)(nil).WorkerPodNetworkPolicy), namespace)
}
