// Code generated by MockGen. DO NOT EDIT.
// Source: helper.go
//
// Generated by this command:
//
//	mockgen -source=helper.go -package=ocpbuild -destination=mock_helper.go
//
// Package ocpbuild is a generated GoMock package.
package ocpbuild

import (
	context "context"
	reflect "reflect"

	v1 "github.com/openshift/api/build/v1"
	api "github.com/rh-ecosystem-edge/kernel-module-management/internal/api"
	gomock "go.uber.org/mock/gomock"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockOCPBuildsHelper is a mock of OCPBuildsHelper interface.
type MockOCPBuildsHelper struct {
	ctrl     *gomock.Controller
	recorder *MockOCPBuildsHelperMockRecorder
}

// MockOCPBuildsHelperMockRecorder is the mock recorder for MockOCPBuildsHelper.
type MockOCPBuildsHelperMockRecorder struct {
	mock *MockOCPBuildsHelper
}

// NewMockOCPBuildsHelper creates a new mock instance.
func NewMockOCPBuildsHelper(ctrl *gomock.Controller) *MockOCPBuildsHelper {
	mock := &MockOCPBuildsHelper{ctrl: ctrl}
	mock.recorder = &MockOCPBuildsHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOCPBuildsHelper) EXPECT() *MockOCPBuildsHelperMockRecorder {
	return m.recorder
}

// DeleteOCPBuild mocks base method.
func (m *MockOCPBuildsHelper) DeleteOCPBuild(ctx context.Context, build *v1.Build) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOCPBuild", ctx, build)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOCPBuild indicates an expected call of DeleteOCPBuild.
func (mr *MockOCPBuildsHelperMockRecorder) DeleteOCPBuild(ctx, build any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOCPBuild", reflect.TypeOf((*MockOCPBuildsHelper)(nil).DeleteOCPBuild), ctx, build)
}

// GetModuleOCPBuildByKernel mocks base method.
func (m *MockOCPBuildsHelper) GetModuleOCPBuildByKernel(ctx context.Context, mld *api.ModuleLoaderData, owner v10.Object) (*v1.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleOCPBuildByKernel", ctx, mld, owner)
	ret0, _ := ret[0].(*v1.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModuleOCPBuildByKernel indicates an expected call of GetModuleOCPBuildByKernel.
func (mr *MockOCPBuildsHelperMockRecorder) GetModuleOCPBuildByKernel(ctx, mld, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleOCPBuildByKernel", reflect.TypeOf((*MockOCPBuildsHelper)(nil).GetModuleOCPBuildByKernel), ctx, mld, owner)
}

// GetModuleOCPBuilds mocks base method.
func (m *MockOCPBuildsHelper) GetModuleOCPBuilds(ctx context.Context, moduleName, moduleNamespace string, owner v10.Object) ([]v1.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleOCPBuilds", ctx, moduleName, moduleNamespace, owner)
	ret0, _ := ret[0].([]v1.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModuleOCPBuilds indicates an expected call of GetModuleOCPBuilds.
func (mr *MockOCPBuildsHelperMockRecorder) GetModuleOCPBuilds(ctx, moduleName, moduleNamespace, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleOCPBuilds", reflect.TypeOf((*MockOCPBuildsHelper)(nil).GetModuleOCPBuilds), ctx, moduleName, moduleNamespace, owner)
}
