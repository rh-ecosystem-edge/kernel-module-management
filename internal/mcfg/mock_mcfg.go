// Code generated by MockGen. DO NOT EDIT.
// Source: mcfg.go
//
// Generated by this command:
//
//	mockgen -source=mcfg.go -package=mcfg -destination=mock_mcfg.go
//
// Package mcfg is a generated GoMock package.
package mcfg

import (
	reflect "reflect"

	v1 "github.com/openshift/api/machineconfiguration/v1"
	v10 "github.com/openshift/api/operator/v1"
	v1beta1 "github.com/rh-ecosystem-edge/kernel-module-management/api/v1beta1"
	gomock "go.uber.org/mock/gomock"
)

// MockMCFG is a mock of MCFG interface.
type MockMCFG struct {
	ctrl     *gomock.Controller
	recorder *MockMCFGMockRecorder
}

// MockMCFGMockRecorder is the mock recorder for MockMCFG.
type MockMCFGMockRecorder struct {
	mock *MockMCFG
}

// NewMockMCFG creates a new mock instance.
func NewMockMCFG(ctrl *gomock.Controller) *MockMCFG {
	mock := &MockMCFG{ctrl: ctrl}
	mock.recorder = &MockMCFGMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMCFG) EXPECT() *MockMCFGMockRecorder {
	return m.recorder
}

// GenerateIgnition mocks base method.
func (m *MockMCFG) GenerateIgnition(kernelModuleImage, kernelModuleName, inTreeModuleToRemove, firmwareFilesPath, workerImage, servicePrefix string) ([]byte, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateIgnition", kernelModuleImage, kernelModuleName, inTreeModuleToRemove, firmwareFilesPath, workerImage, servicePrefix)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateIgnition indicates an expected call of GenerateIgnition.
func (mr *MockMCFGMockRecorder) GenerateIgnition(kernelModuleImage, kernelModuleName, inTreeModuleToRemove, firmwareFilesPath, workerImage, servicePrefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateIgnition", reflect.TypeOf((*MockMCFG)(nil).GenerateIgnition), kernelModuleImage, kernelModuleName, inTreeModuleToRemove, firmwareFilesPath, workerImage, servicePrefix)
}

// UpdateDisruptionPolicies mocks base method.
func (m *MockMCFG) UpdateDisruptionPolicies(mc *v10.MachineConfiguration, bmc *v1beta1.BootModuleConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateDisruptionPolicies", mc, bmc)
}

// UpdateDisruptionPolicies indicates an expected call of UpdateDisruptionPolicies.
func (mr *MockMCFGMockRecorder) UpdateDisruptionPolicies(mc, bmc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDisruptionPolicies", reflect.TypeOf((*MockMCFG)(nil).UpdateDisruptionPolicies), mc, bmc)
}

// UpdateMachineConfig mocks base method.
func (m *MockMCFG) UpdateMachineConfig(mc *v1.MachineConfig, bmc *v1beta1.BootModuleConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMachineConfig", mc, bmc)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMachineConfig indicates an expected call of UpdateMachineConfig.
func (mr *MockMCFGMockRecorder) UpdateMachineConfig(mc, bmc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMachineConfig", reflect.TypeOf((*MockMCFG)(nil).UpdateMachineConfig), mc, bmc)
}
