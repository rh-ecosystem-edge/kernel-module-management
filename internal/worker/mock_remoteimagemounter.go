// Code generated by MockGen. DO NOT EDIT.
// Source: remoteimagemounter.go
//
// Generated by this command:
//
//	mockgen -source=remoteimagemounter.go -package=worker -destination=mock_remoteimagemounter.go remoteImageMounterHelperAPI
//
// Package worker is a generated GoMock package.
package worker

import (
	context "context"
	reflect "reflect"

	v1beta1 "github.com/rh-ecosystem-edge/kernel-module-management/api/v1beta1"
	gomock "go.uber.org/mock/gomock"
)

// MockremoteImageMounterHelperAPI is a mock of remoteImageMounterHelperAPI interface.
type MockremoteImageMounterHelperAPI struct {
	ctrl     *gomock.Controller
	recorder *MockremoteImageMounterHelperAPIMockRecorder
}

// MockremoteImageMounterHelperAPIMockRecorder is the mock recorder for MockremoteImageMounterHelperAPI.
type MockremoteImageMounterHelperAPIMockRecorder struct {
	mock *MockremoteImageMounterHelperAPI
}

// NewMockremoteImageMounterHelperAPI creates a new mock instance.
func NewMockremoteImageMounterHelperAPI(ctrl *gomock.Controller) *MockremoteImageMounterHelperAPI {
	mock := &MockremoteImageMounterHelperAPI{ctrl: ctrl}
	mock.recorder = &MockremoteImageMounterHelperAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockremoteImageMounterHelperAPI) EXPECT() *MockremoteImageMounterHelperAPIMockRecorder {
	return m.recorder
}

// mountImage mocks base method.
func (m *MockremoteImageMounterHelperAPI) mountImage(ctx context.Context, imageName string, cfg *v1beta1.ModuleConfig) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "mountImage", ctx, imageName, cfg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// mountImage indicates an expected call of mountImage.
func (mr *MockremoteImageMounterHelperAPIMockRecorder) mountImage(ctx, imageName, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mountImage", reflect.TypeOf((*MockremoteImageMounterHelperAPI)(nil).mountImage), ctx, imageName, cfg)
}
