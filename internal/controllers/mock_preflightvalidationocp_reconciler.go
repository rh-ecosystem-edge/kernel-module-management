// Code generated by MockGen. DO NOT EDIT.
// Source: preflightvalidationocp_reconciler.go
//
// Generated by this command:
//
//	mockgen -source=preflightvalidationocp_reconciler.go -package=controllers -destination=mock_preflightvalidationocp_reconciler.go preflightOCPReconcilerHelper
//
// Package controllers is a generated GoMock package.
package controllers

import (
	context "context"
	reflect "reflect"

	v1beta2 "github.com/rh-ecosystem-edge/kernel-module-management/api/v1beta2"
	gomock "go.uber.org/mock/gomock"
)

// MockpreflightOCPReconcilerHelper is a mock of preflightOCPReconcilerHelper interface.
type MockpreflightOCPReconcilerHelper struct {
	ctrl     *gomock.Controller
	recorder *MockpreflightOCPReconcilerHelperMockRecorder
}

// MockpreflightOCPReconcilerHelperMockRecorder is the mock recorder for MockpreflightOCPReconcilerHelper.
type MockpreflightOCPReconcilerHelperMockRecorder struct {
	mock *MockpreflightOCPReconcilerHelper
}

// NewMockpreflightOCPReconcilerHelper creates a new mock instance.
func NewMockpreflightOCPReconcilerHelper(ctrl *gomock.Controller) *MockpreflightOCPReconcilerHelper {
	mock := &MockpreflightOCPReconcilerHelper{ctrl: ctrl}
	mock.recorder = &MockpreflightOCPReconcilerHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpreflightOCPReconcilerHelper) EXPECT() *MockpreflightOCPReconcilerHelperMockRecorder {
	return m.recorder
}

// preparePreflightValidation mocks base method.
func (m *MockpreflightOCPReconcilerHelper) preparePreflightValidation(ctx context.Context, pvo *v1beta2.PreflightValidationOCP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "preparePreflightValidation", ctx, pvo)
	ret0, _ := ret[0].(error)
	return ret0
}

// preparePreflightValidation indicates an expected call of preparePreflightValidation.
func (mr *MockpreflightOCPReconcilerHelperMockRecorder) preparePreflightValidation(ctx, pvo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "preparePreflightValidation", reflect.TypeOf((*MockpreflightOCPReconcilerHelper)(nil).preparePreflightValidation), ctx, pvo)
}

// setDTKMapping mocks base method.
func (m *MockpreflightOCPReconcilerHelper) setDTKMapping(pvo *v1beta2.PreflightValidationOCP) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "setDTKMapping", pvo)
}

// setDTKMapping indicates an expected call of setDTKMapping.
func (mr *MockpreflightOCPReconcilerHelperMockRecorder) setDTKMapping(pvo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setDTKMapping", reflect.TypeOf((*MockpreflightOCPReconcilerHelper)(nil).setDTKMapping), pvo)
}

// updateStatus mocks base method.
func (m *MockpreflightOCPReconcilerHelper) updateStatus(ctx context.Context, pvo *v1beta2.PreflightValidationOCP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateStatus", ctx, pvo)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateStatus indicates an expected call of updateStatus.
func (mr *MockpreflightOCPReconcilerHelperMockRecorder) updateStatus(ctx, pvo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateStatus", reflect.TypeOf((*MockpreflightOCPReconcilerHelper)(nil).updateStatus), ctx, pvo)
}
