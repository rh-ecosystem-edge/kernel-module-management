// Code generated by MockGen. DO NOT EDIT.
// Source: bmc_reconciler.go
//
// Generated by this command:
//
//	mockgen -source=bmc_reconciler.go -package=controllers -destination=mock_bmc_reconciler.go bmcReconcilerHelperAPI
//
// Package controllers is a generated GoMock package.
package controllers

import (
	context "context"
	reflect "reflect"

	v1beta1 "github.com/rh-ecosystem-edge/kernel-module-management/api/v1beta1"
	gomock "go.uber.org/mock/gomock"
)

// MockbmcReconcilerHelperAPI is a mock of bmcReconcilerHelperAPI interface.
type MockbmcReconcilerHelperAPI struct {
	ctrl     *gomock.Controller
	recorder *MockbmcReconcilerHelperAPIMockRecorder
}

// MockbmcReconcilerHelperAPIMockRecorder is the mock recorder for MockbmcReconcilerHelperAPI.
type MockbmcReconcilerHelperAPIMockRecorder struct {
	mock *MockbmcReconcilerHelperAPI
}

// NewMockbmcReconcilerHelperAPI creates a new mock instance.
func NewMockbmcReconcilerHelperAPI(ctrl *gomock.Controller) *MockbmcReconcilerHelperAPI {
	mock := &MockbmcReconcilerHelperAPI{ctrl: ctrl}
	mock.recorder = &MockbmcReconcilerHelperAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbmcReconcilerHelperAPI) EXPECT() *MockbmcReconcilerHelperAPIMockRecorder {
	return m.recorder
}

// finalizeBMC mocks base method.
func (m *MockbmcReconcilerHelperAPI) finalizeBMC(ctx context.Context, bmc *v1beta1.BootModuleConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "finalizeBMC", ctx, bmc)
	ret0, _ := ret[0].(error)
	return ret0
}

// finalizeBMC indicates an expected call of finalizeBMC.
func (mr *MockbmcReconcilerHelperAPIMockRecorder) finalizeBMC(ctx, bmc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "finalizeBMC", reflect.TypeOf((*MockbmcReconcilerHelperAPI)(nil).finalizeBMC), ctx, bmc)
}

// handleMachineConfig mocks base method.
func (m *MockbmcReconcilerHelperAPI) handleMachineConfig(ctx context.Context, bmc *v1beta1.BootModuleConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handleMachineConfig", ctx, bmc)
	ret0, _ := ret[0].(error)
	return ret0
}

// handleMachineConfig indicates an expected call of handleMachineConfig.
func (mr *MockbmcReconcilerHelperAPIMockRecorder) handleMachineConfig(ctx, bmc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleMachineConfig", reflect.TypeOf((*MockbmcReconcilerHelperAPI)(nil).handleMachineConfig), ctx, bmc)
}

// handleMachineConfiguration mocks base method.
func (m *MockbmcReconcilerHelperAPI) handleMachineConfiguration(ctx context.Context, bmc *v1beta1.BootModuleConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handleMachineConfiguration", ctx, bmc)
	ret0, _ := ret[0].(error)
	return ret0
}

// handleMachineConfiguration indicates an expected call of handleMachineConfiguration.
func (mr *MockbmcReconcilerHelperAPIMockRecorder) handleMachineConfiguration(ctx, bmc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleMachineConfiguration", reflect.TypeOf((*MockbmcReconcilerHelperAPI)(nil).handleMachineConfiguration), ctx, bmc)
}

// setFinalizer mocks base method.
func (m *MockbmcReconcilerHelperAPI) setFinalizer(ctx context.Context, bmc *v1beta1.BootModuleConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setFinalizer", ctx, bmc)
	ret0, _ := ret[0].(error)
	return ret0
}

// setFinalizer indicates an expected call of setFinalizer.
func (mr *MockbmcReconcilerHelperAPIMockRecorder) setFinalizer(ctx, bmc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setFinalizer", reflect.TypeOf((*MockbmcReconcilerHelperAPI)(nil).setFinalizer), ctx, bmc)
}
