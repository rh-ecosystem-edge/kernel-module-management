// Code generated by MockGen. DO NOT EDIT.
// Source: signer.go
//
// Generated by this command:
//
//	mockgen -source=signer.go -package=ocpbuild -destination=mock_signer.go Signer
//
// Package ocpbuild is a generated GoMock package.
package ocpbuild

import (
	context "context"
	reflect "reflect"

	v1 "github.com/openshift/api/build/v1"
	api "github.com/rh-ecosystem-edge/kernel-module-management/internal/api"
	gomock "go.uber.org/mock/gomock"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Mocksigner is a mock of signer interface.
type Mocksigner struct {
	ctrl     *gomock.Controller
	recorder *MocksignerMockRecorder
}

// MocksignerMockRecorder is the mock recorder for Mocksigner.
type MocksignerMockRecorder struct {
	mock *Mocksigner
}

// NewMocksigner creates a new mock instance.
func NewMocksigner(ctrl *gomock.Controller) *Mocksigner {
	mock := &Mocksigner{ctrl: ctrl}
	mock.recorder = &MocksignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocksigner) EXPECT() *MocksignerMockRecorder {
	return m.recorder
}

// makeBuildTemplate mocks base method.
func (m *Mocksigner) makeBuildTemplate(ctx context.Context, mld *api.ModuleLoaderData, pushImage bool, owner v10.Object) (*v1.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "makeBuildTemplate", ctx, mld, pushImage, owner)
	ret0, _ := ret[0].(*v1.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// makeBuildTemplate indicates an expected call of makeBuildTemplate.
func (mr *MocksignerMockRecorder) makeBuildTemplate(ctx, mld, pushImage, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "makeBuildTemplate", reflect.TypeOf((*Mocksigner)(nil).makeBuildTemplate), ctx, mld, pushImage, owner)
}
