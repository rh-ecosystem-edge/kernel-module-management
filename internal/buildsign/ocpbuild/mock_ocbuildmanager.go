// Code generated by MockGen. DO NOT EDIT.
// Source: ocpbuildmanager.go
//
// Generated by this command:
//
//	mockgen -source=ocpbuildmanager.go -package=ocpbuild -destination=mock_ocbuildmanager.go
//
// Package ocpbuild is a generated GoMock package.
package ocpbuild

import (
	context "context"
	reflect "reflect"

	v1 "github.com/openshift/api/build/v1"
	gomock "go.uber.org/mock/gomock"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockocpbuildManager is a mock of ocpbuildManager interface.
type MockocpbuildManager struct {
	ctrl     *gomock.Controller
	recorder *MockocpbuildManagerMockRecorder
}

// MockocpbuildManagerMockRecorder is the mock recorder for MockocpbuildManager.
type MockocpbuildManagerMockRecorder struct {
	mock *MockocpbuildManager
}

// NewMockocpbuildManager creates a new mock instance.
func NewMockocpbuildManager(ctrl *gomock.Controller) *MockocpbuildManager {
	mock := &MockocpbuildManager{ctrl: ctrl}
	mock.recorder = &MockocpbuildManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockocpbuildManager) EXPECT() *MockocpbuildManagerMockRecorder {
	return m.recorder
}

// createOCPBuild mocks base method.
func (m *MockocpbuildManager) createOCPBuild(ctx context.Context, build *v1.Build) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createOCPBuild", ctx, build)
	ret0, _ := ret[0].(error)
	return ret0
}

// createOCPBuild indicates an expected call of createOCPBuild.
func (mr *MockocpbuildManagerMockRecorder) createOCPBuild(ctx, build any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createOCPBuild", reflect.TypeOf((*MockocpbuildManager)(nil).createOCPBuild), ctx, build)
}

// deleteOCPBuild mocks base method.
func (m *MockocpbuildManager) deleteOCPBuild(ctx context.Context, build *v1.Build) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteOCPBuild", ctx, build)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteOCPBuild indicates an expected call of deleteOCPBuild.
func (mr *MockocpbuildManagerMockRecorder) deleteOCPBuild(ctx, build any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteOCPBuild", reflect.TypeOf((*MockocpbuildManager)(nil).deleteOCPBuild), ctx, build)
}

// getModuleOCPBuildByKernel mocks base method.
func (m *MockocpbuildManager) getModuleOCPBuildByKernel(ctx context.Context, modName, namespace, kernelVersion, ocbuildType string, owner v10.Object) (*v1.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getModuleOCPBuildByKernel", ctx, modName, namespace, kernelVersion, ocbuildType, owner)
	ret0, _ := ret[0].(*v1.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getModuleOCPBuildByKernel indicates an expected call of getModuleOCPBuildByKernel.
func (mr *MockocpbuildManagerMockRecorder) getModuleOCPBuildByKernel(ctx, modName, namespace, kernelVersion, ocbuildType, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getModuleOCPBuildByKernel", reflect.TypeOf((*MockocpbuildManager)(nil).getModuleOCPBuildByKernel), ctx, modName, namespace, kernelVersion, ocbuildType, owner)
}

// getModuleOCPBuilds mocks base method.
func (m *MockocpbuildManager) getModuleOCPBuilds(ctx context.Context, modName, modNamespace, ocbuildType string, owner v10.Object) ([]v1.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getModuleOCPBuilds", ctx, modName, modNamespace, ocbuildType, owner)
	ret0, _ := ret[0].([]v1.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getModuleOCPBuilds indicates an expected call of getModuleOCPBuilds.
func (mr *MockocpbuildManagerMockRecorder) getModuleOCPBuilds(ctx, modName, modNamespace, ocbuildType, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getModuleOCPBuilds", reflect.TypeOf((*MockocpbuildManager)(nil).getModuleOCPBuilds), ctx, modName, modNamespace, ocbuildType, owner)
}

// getOCPBuildStatus mocks base method.
func (m *MockocpbuildManager) getOCPBuildStatus(build *v1.Build) (Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getOCPBuildStatus", build)
	ret0, _ := ret[0].(Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getOCPBuildStatus indicates an expected call of getOCPBuildStatus.
func (mr *MockocpbuildManagerMockRecorder) getOCPBuildStatus(build any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getOCPBuildStatus", reflect.TypeOf((*MockocpbuildManager)(nil).getOCPBuildStatus), build)
}

// isOCPBuildChanged mocks base method.
func (m *MockocpbuildManager) isOCPBuildChanged(existingBuild, newBuild *v1.Build) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "isOCPBuildChanged", existingBuild, newBuild)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// isOCPBuildChanged indicates an expected call of isOCPBuildChanged.
func (mr *MockocpbuildManagerMockRecorder) isOCPBuildChanged(existingBuild, newBuild any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isOCPBuildChanged", reflect.TypeOf((*MockocpbuildManager)(nil).isOCPBuildChanged), existingBuild, newBuild)
}

// ocpbuildAnnotations mocks base method.
func (m *MockocpbuildManager) ocpbuildAnnotations(hash uint64) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ocpbuildAnnotations", hash)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// ocpbuildAnnotations indicates an expected call of ocpbuildAnnotations.
func (mr *MockocpbuildManagerMockRecorder) ocpbuildAnnotations(hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ocpbuildAnnotations", reflect.TypeOf((*MockocpbuildManager)(nil).ocpbuildAnnotations), hash)
}

// ocpbuildLabels mocks base method.
func (m *MockocpbuildManager) ocpbuildLabels(modName, kernelVersion, ocpbuildType string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ocpbuildLabels", modName, kernelVersion, ocpbuildType)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// ocpbuildLabels indicates an expected call of ocpbuildLabels.
func (mr *MockocpbuildManagerMockRecorder) ocpbuildLabels(modName, kernelVersion, ocpbuildType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ocpbuildLabels", reflect.TypeOf((*MockocpbuildManager)(nil).ocpbuildLabels), modName, kernelVersion, ocpbuildType)
}
