#!/bin/bash
#
set -euxo pipefail

readonly SKIP_ACM_INSTALLATION="${SKIP_ACM_INSTALLATION:-false}"

export CLUSTER_NAME=local-cluster
export OPERATOR_NAMESPACE=openshift-kmm
export HUB_OPERATOR_NAMESPACE=openshift-kmm-hub
export ACM_NAMESPACE=advanced-cluster-management


if [ "$SKIP_ACM_INSTALLATION" == true ]; then
  echo "Skipping ACM installation"
else
  echo "Install ACM..."
  oc create namespace ${ACM_NAMESPACE}
  oc apply -f ci/acm_subscription.yaml
  timeout 1m bash -c '
    until oc get crds -o json | jq -er ".items[].metadata.name | select(.? | match(\"multiclusterhubs\"))"; do
      sleep 1;
    done
  '
  oc apply -f ci/acm_multiclusterhub.yaml
  timeout 15m bash -c '
    acm_phase="oc -n ${ACM_NAMESPACE} get multiclusterhub/multiclusterhub -o json | jq -r \".status.phase\""
    until [[ $(eval ${acm_phase}) == "Running" ]]; do
      sleep 1;
    done
  '

  oc label managedcluster local-cluster name=${CLUSTER_NAME}
fi

oc create namespace "$OPERATOR_NAMESPACE"
operator-sdk run bundle "$OO_BUNDLE" -n "$OPERATOR_NAMESPACE"

oc create namespace "$HUB_OPERATOR_NAMESPACE"
operator-sdk run bundle "$OO_HUB_BUNDLE" -n "$HUB_OPERATOR_NAMESPACE"

oc wait --for=condition=Available -n ${OPERATOR_NAMESPACE} \
  deployment/kmm-operator-controller \
  deployment/kmm-operator-webhook-server

oc wait --for=condition=Available -n ${HUB_OPERATOR_NAMESPACE} \
  deployment/kmm-operator-hub-controller \
  deployment/kmm-operator-hub-webhook-server

# Apply resources
oc apply -k ci/e2e-hub

# Wait for the build build to be created and completed
timeout 1m bash -c 'until oc -n ${HUB_OPERATOR_NAMESPACE} get builds -o json | jq -er ".items[].metadata.name | select(.? | match(\"build\"))"; do sleep 1; done'
export build_build=$(oc -n ${HUB_OPERATOR_NAMESPACE} get builds -o json | jq -r '.items[].metadata.name | select(.? | match("build"))')
oc -n ${HUB_OPERATOR_NAMESPACE} wait --for=condition=complete --timeout=3m build/${build_build}

# Wait for the sign build to be created and completed
timeout 1m bash -c 'until oc -n ${HUB_OPERATOR_NAMESPACE} get builds -o json | jq -er ".items[].metadata.name | select(.? | match(\"sign\"))"; do sleep 1; done'
export sign_build=$(oc -n ${HUB_OPERATOR_NAMESPACE} get builds -o json | jq -r '.items[].metadata.name | select(.? | match("sign"))')
oc -n ${HUB_OPERATOR_NAMESPACE} wait --for=condition=complete --timeout=1m build/${sign_build}

# Waiting for the manifestwork to be created
timeout 1m bash -c 'until oc -n ${CLUSTER_NAME} get manifestwork/mod-example; do sleep 1; done'
oc get manifestwork/mod-example -n ${CLUSTER_NAME} -o jsonpath='{.spec.workload.manifests}'

# Validate that the Module has no `build`/`sign` sections
timeout 1m bash -c 'until oc -n ${OPERATOR_NAMESPACE} get module/mod-example; do sleep 1; done'
oc -n ${OPERATOR_NAMESPACE} get module/mod-example -o json | \
    jq '.spec.moduleLoader.container.kernelMappings[] | (.build | type) == "null" and (.sign // null | type) == "null"' | grep true
